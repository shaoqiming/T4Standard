<#+
    public class ServiceTemple:Template
    {
	    public ServiceTemple(Table table,IEnumerable<string> includeTables):base(table,includeTables)
        {
        }

        public override string TransformText()
        {
#>
using System;
using VarProject.FrameWork.Core.Pagination;
using <#=ProjectName#>.BF.<#=Namespace#>;
using <#=ProjectName#>.Data.<#=Namespace#>;

namespace <#=ProjectName#>.Service.<#=Namespace#>
{
    public class <#=EntityName#>Service
    {
                //添加
        public void add(<#=EntityName#>Model model)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            model.PID = Guid.NewGuid().ToString();
            model.IsDelete = false;
            model.CreateTime = DateTime.Now;
            bf.add(model);
            bf.EFSubmit();
        }

        //更新
        public void Update(<#=EntityName#>Model model)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            bf.Update(model);
            bf.EFSubmit();
        }

        public void Delete(string key)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            var model = bf.GetModelById(key);
            if (model != null)
            {
                bf.Delete(model);
            }

            bf.EFSubmit();
        }


        public Pagination<<#=EntityName#>ModelDTO> GetListbyPainComplex(string key,int pageIndex, int pageSize)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();

            return bf.GetListbyPainComplex(key, pageIndex, pageSize, descStr);       
        }


        public Pagination<<#=EntityName#>Model> GetListbyPain(string key,int pageIndex, int pageSize)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
       <#+
                if(UtilTemplate.isContain(t,"IsDelete"))
            {#>
                 return bf.ListByPain(a => a.IsDelete == false,pageIndex, pageSize);
<#+        }else{#>
                return bf.ListByPain(a =>true,pageIndex, pageSize);
<#+        }#>          
        }

        public <#=EntityName#>Model GetDetailByKey(string key)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            return bf.GetModelById(key);
        }

    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }


#>
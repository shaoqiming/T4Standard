<#+
    public class BFTemplate:Template
    {
	    public BFTemplate(Table table,IEnumerable<string> includeTables):base(table,includeTables)
        {
        }

        public override string TransformText()
        {
#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using exin.FrameWork.Core.Pagination;
using exin.FrameWork.Core.Common;
using <#=ProjectName#>.DA.<#=Namespace#>;
using <#=ProjectName#>.Data.<#=Namespace#>;

namespace <#=ProjectName#>.BF.<#=Namespace#>
{
    public class BF<#=EntityName#>:ExinBaseBF
    {
                //添加
        public void add(<#=EntityName#>Model data)
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            data.PID = Guid.NewGuid().ToString();
            da.Add(data);
        }

        //更新
        public void Update(<#=EntityName#>Model data)
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);

                da.Update(data);
            
        }

        //分页查询
        public Pagination<<#=EntityName#>Model> ListByPain(Expression<Func<<#=EntityName#>Model, bool>> where,int pagaIndex, int pageSize)
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            return da.QueryMany(where).OrderBy(a => a.PID).FetchPage(currentPageIndex: pagaIndex, pageSize: pageSize);
        }

        //条件查询
        public List<<#=EntityName#>Model> QueryData()
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            return da.GetMany(a => true).ToList();
        }

        public void Delete(<#=EntityName#>Model data)
        {
             DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            //没有isDelete的字段情况下使用 Delete 有IsDelete的情况下使用Update
            <#+
                if(UtilTemplate.isContain(t,"IsDelete"))
            {#>
               data.IsDelete=true;
                da.Update(data);
            <#+
            }else{ #> 
            da.Delete(data);
             <#+}#> 
        }

  
        /// <summary>
        /// 通过id获取实体
        /// </summary>
        /// <param name="pId"></param>
        /// <returns></returns>
        public <#=EntityName#>Model GetModelById(string pId)
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            <#+
                if(UtilTemplate.isContain(t,"IsDelete"))
            {#>
            return da.GetMany(a => a.PID == pId&&a.IsDelete==false).FirstOrDefault();//要加上isDelete的条件
           <#+
            }else{ #> 
			return da.GetMany(a => a.PID == pId).FirstOrDefault();//要加上isDelete的条件
			  <#+}#> 
        }

         
        /// <summary>
        /// 映射到DTO上面
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        public IQueryable<<#=EntityName#>ModelDTO> GetModelDTO(Expression<Func<<#=EntityName#>Model, bool>> predicate = null)
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            if (predicate == null)
            {
                predicate = model => true;
            }

            var query = from a in da.DataContext.Set<<#=EntityName#>Model>().Where(a => true)
                        where predicate.Invoke(a)
                        select new <#=EntityName#>ModelDTO()
                        {
                            <#+
							int i=0;
						    foreach (Column c in t.Columns)
							{
							i++;
							#>
							<#=c.Name#>=a.<#=c.Name#><#+if(t.Columns.Count!=i){#>, <#+}
							}
						#>
                        };

            return query;
        }


        /// <summary>
        /// 根据出入的linq语句进行查询
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="exps">条件</param>
        /// <param name="key">关键字</param>
        /// <param name="isDesc">是否降序</param>
        /// <returns></returns>
        public List<<#=EntityName#>Model> CustomQuery<T>(Func<<#=EntityName#>Model, bool> exps, Func<<#=EntityName#>Model, T> key, bool isDesc = false)
        {
            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            if (isDesc)
            {
                return da.GetMany(exps).OrderByDescending(key).ToList();
            }
            return da.GetMany(exps).OrderBy(key).ToList();
        }

        /// <summary>
        /// 根据出入的linq语句进行查询
        /// </summary>
        /// <param name="exps">关键字</param>
        /// <param name="key">升序</param>
        /// <returns></returns>
        public List<<#=EntityName#>Model> CustomQuery(Expression<Func<<#=EntityName#>Model, bool>> exps, string key)
        {
           DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            return da.QueryMany(exps).OrderBy(key).ToList();
        }



        /// <summary>
        /// 后台列表显示(也是多表联查的数据)
        /// </summary>
        /// <param name="key">搜索关键字</param>
        /// <param name="pageIndex">页数</param>
        /// <param name="pageSize">页大小</param>
        /// <param name="descStr">排序字段</param>
        /// <returns></returns>
        public Pagination<<#=EntityName#>ModelDTO>  GetListbyPainComplex(string key, int pageIndex, int pageSize, string descStr)
        {

            DA<#=EntityName#> da = new DA<#=EntityName#>(UnitOfData);
            
            IQueryable<<#=EntityName#>ModelDTO> query = from a in da.DataContext.Set<<#=EntityName#>Model>().AsQueryable()<#+
						    foreach (Column c in t.Columns)
							{
								 if(c.Name.EndsWith("_SelSource"))
								 {
								var salveTable=UtilTemplate.getSalveTableName(UtilTemplate.GetColumnDescription(c));
								var salveTableName=GetEntityName2(salveTable,"");
								var salveTableNameTolow=GetEntityName2(salveTable,"").ToLower();
								var salveField=UtilTemplate.getSalveFile(UtilTemplate.GetColumnDescription(c));	
								var lowName=UtilTemplate.StrTopLower(c.Name);
								#>	join <#=salveTableNameTolow#> in da.DataContext.Set<<#=salveTableName#>Model>().AsQueryable() on a.<#=c.Name#> equals <#=salveTableNameTolow#>.<#=salveField#> into <#=salveTableNameTolow#>Temp
									from <#=salveTableNameTolow#>result in <#=salveTableNameTolow#>Temp.DefaultIfEmpty()
								<#+}
							}#>
                            where a.IsDelete == false || a.IsDelete == null
                            select new <#=EntityName#>ModelDTO(){<#+  int k=0;
								    foreach (Column c in t.Columns)
									{
										k++;
										if(c.Name.EndsWith("_SelSource"))
										{
								var salveTable=UtilTemplate.getSalveTableName(UtilTemplate.GetColumnDescription(c));
								var salveTableName=GetEntityName2(salveTable,"");
								var salveTableNameTolow=GetEntityName2(salveTable,"").ToLower();
								var salveField=UtilTemplate.getSalveFile(UtilTemplate.GetColumnDescription(c));
								var SalveValue=UtilTemplate.getSalveValue(UtilTemplate.GetColumnDescription(c));
											#><#=c.Name#>=a.<#=c.Name#>,
											<#=c.Name#>Name=<#=salveTableNameTolow#>result==null?"":<#=salveTableNameTolow#>result.<#=SalveValue#><#+if(t.Columns.Count!=k){#>, <#+}
										}else{					
											#><#=c.Name#>=a.<#=c.Name#><#+if(t.Columns.Count!=k){#>, <#+}}						
									}
							#>};				
				
            if (!string.IsNullOrEmpty(key))
            {
                 query = query.Where(a => <#+int ke=0; for(int s=0;s<t.Columns.Count;s++)
                        {
                        if(UtilTemplate.GetSysType(t.Columns[s].DataType.Name)=="string"&&!UtilTemplate.IsBaseField(t.Columns[s].Name)&&!t.Columns[s].Name.EndsWith("ID")&&!t.Columns[s].Name.EndsWith("_SelSource"))
                            { if(ke!=0){#>||<#+} ke++; #>a.<#=t.Columns[s].Name#>.Contains(key) <#+}
                        }#>);                
            }

	
            if (string.IsNullOrEmpty(descStr))
            {
                descStr = "CreateTime descending";
            }

            return query.OrderBy(descStr).FetchPage(currentPageIndex: pageIndex, pageSize: pageSize);                                                    

        }  
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }


#>
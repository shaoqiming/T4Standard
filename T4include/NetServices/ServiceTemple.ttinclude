<#+
    public class ServiceTemple:Template
    {
	    public ServiceTemple(Table table,IEnumerable<string> includeTables):base(table,includeTables)
        {
        }

        public override string TransformText()
        {
#>
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using exin.FrameWork.Core.Pagination;
using <#=ProjectName#>.BF.<#=Namespace#>;
using <#=ProjectName#>.Data.<#=Namespace#>;

namespace <#=ProjectName#>.Service.<#=Namespace#>
{
    public class <#=EntityName#>Service
    {
                //添加
        public void add(<#=EntityName#>Model model)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            model.PID = Guid.NewGuid().ToString();
            model.IsDelete = false;
            model.CreateTime = DateTime.Now;
            bf.add(model);
            bf.EFSubmit();
        }

        //更新
        public void Update(<#=EntityName#>Model model)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            bf.Update(model);
            bf.EFSubmit();
        }

        public void Delete(string key)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            var model = bf.GetModelById(key);
            if (model != null)
            {
                bf.Delete(model);
            }

            bf.EFSubmit();
        }


        public Pagination<<#=EntityName#>Model> GetListbyPain(string key,int pageIndex, int pageSize)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
       <#+
                if(UtilTemplate.isContain(t,"IsDelete"))
            {#>
                 return bf.ListByPain(a => a.IsDelete == false,pageIndex, pageSize);
<#+        }else{#>
                return bf.ListByPain(a =>true,pageIndex, pageSize);
<#+        }#>          
        }

        public <#=EntityName#>Model GetDetailByKey(string key)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            return bf.GetModelById(key);
        }

        public Pagination<<#=EntityName#>ModelDTO> GetListbyPainComplex(string key,int pageIndex, int pageSize)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();

            return bf.GetListbyPainComplex(key, pageIndex, pageSize, "");       
        }


        public List<<#=EntityName#>Model> CustomQuery<T>(Func<<#=EntityName#>Model, bool> exps, Func<<#=EntityName#>Model, T> key, bool isDesc = false)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            return bf.CustomQuery(exps, key, isDesc);
        }

        public List<<#=EntityName#>Model> CustomQuery(Expression<Func<<#=EntityName#>Model, bool>> exps, string key)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            return bf.CustomQuery(exps, key);
        }



		#region 删除

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="isSoftDelete"></param>
        /// <param name="opUserId"></param>
        public void IdDelete(List<string> id, bool isSoftDelete = true, string opUserId = null)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            bf.IdDelete(id, isSoftDelete, opUserId);
			bf.EFSubmit();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="isSoftDelete"></param>
        /// <param name="opUserId"></param>
        public void IdDelete(string id, bool isSoftDelete = true, string opUserId = null)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            bf.IdDelete(id, isSoftDelete, opUserId);
			bf.EFSubmit();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="exps"></param>
        /// <param name="isSoftDelete"></param>
        /// <param name="opUserId"></param>
        public void WhereDelete(Expression<Func<<#=EntityName#>Model, bool>> exps, bool isSoftDelete = true, string opUserId = null)
        {
            BF<#=EntityName#> bf = new BF<#=EntityName#>();
            bf.WhereDelete(exps, isSoftDelete, opUserId);
			bf.EFSubmit();
        }

        #endregion

    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }


#>